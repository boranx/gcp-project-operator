// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/gcp-project-operator/pkg/controller/projectclaim (interfaces: CustomResourceAdapter)

// Package projectclaim is a generated GoMock package.
package projectclaim

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/gcp-project-operator/pkg/apis/gcp/v1alpha1"
	projectclaim "github.com/openshift/gcp-project-operator/pkg/controller/projectclaim"
)

// MockCustomResourceAdapter is a mock of CustomResourceAdapter interface
type MockCustomResourceAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourceAdapterMockRecorder
}

// MockCustomResourceAdapterMockRecorder is the mock recorder for MockCustomResourceAdapter
type MockCustomResourceAdapterMockRecorder struct {
	mock *MockCustomResourceAdapter
}

// NewMockCustomResourceAdapter creates a new mock instance
func NewMockCustomResourceAdapter(ctrl *gomock.Controller) *MockCustomResourceAdapter {
	mock := &MockCustomResourceAdapter{ctrl: ctrl}
	mock.recorder = &MockCustomResourceAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomResourceAdapter) EXPECT() *MockCustomResourceAdapterMockRecorder {
	return m.recorder
}

// EnsureFinalizer mocks base method
func (m *MockCustomResourceAdapter) EnsureFinalizer() (projectclaim.ObjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFinalizer")
	ret0, _ := ret[0].(projectclaim.ObjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureFinalizer indicates an expected call of EnsureFinalizer
func (mr *MockCustomResourceAdapterMockRecorder) EnsureFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFinalizer", reflect.TypeOf((*MockCustomResourceAdapter)(nil).EnsureFinalizer))
}

// EnsureProjectClaimInitialized mocks base method
func (m *MockCustomResourceAdapter) EnsureProjectClaimInitialized() (projectclaim.ObjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureProjectClaimInitialized")
	ret0, _ := ret[0].(projectclaim.ObjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureProjectClaimInitialized indicates an expected call of EnsureProjectClaimInitialized
func (mr *MockCustomResourceAdapterMockRecorder) EnsureProjectClaimInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureProjectClaimInitialized", reflect.TypeOf((*MockCustomResourceAdapter)(nil).EnsureProjectClaimInitialized))
}

// EnsureProjectClaimState mocks base method
func (m *MockCustomResourceAdapter) EnsureProjectClaimState(arg0 v1alpha1.ClaimStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureProjectClaimState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureProjectClaimState indicates an expected call of EnsureProjectClaimState
func (mr *MockCustomResourceAdapterMockRecorder) EnsureProjectClaimState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureProjectClaimState", reflect.TypeOf((*MockCustomResourceAdapter)(nil).EnsureProjectClaimState), arg0)
}

// EnsureProjectReferenceExists mocks base method
func (m *MockCustomResourceAdapter) EnsureProjectReferenceExists() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureProjectReferenceExists")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureProjectReferenceExists indicates an expected call of EnsureProjectReferenceExists
func (mr *MockCustomResourceAdapterMockRecorder) EnsureProjectReferenceExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureProjectReferenceExists", reflect.TypeOf((*MockCustomResourceAdapter)(nil).EnsureProjectReferenceExists))
}

// EnsureProjectReferenceLink mocks base method
func (m *MockCustomResourceAdapter) EnsureProjectReferenceLink() (projectclaim.ObjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureProjectReferenceLink")
	ret0, _ := ret[0].(projectclaim.ObjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureProjectReferenceLink indicates an expected call of EnsureProjectReferenceLink
func (mr *MockCustomResourceAdapterMockRecorder) EnsureProjectReferenceLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureProjectReferenceLink", reflect.TypeOf((*MockCustomResourceAdapter)(nil).EnsureProjectReferenceLink))
}

// FinalizeProjectClaim mocks base method
func (m *MockCustomResourceAdapter) FinalizeProjectClaim() (projectclaim.ObjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeProjectClaim")
	ret0, _ := ret[0].(projectclaim.ObjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeProjectClaim indicates an expected call of FinalizeProjectClaim
func (mr *MockCustomResourceAdapterMockRecorder) FinalizeProjectClaim() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeProjectClaim", reflect.TypeOf((*MockCustomResourceAdapter)(nil).FinalizeProjectClaim))
}

// IsProjectClaimDeletion mocks base method
func (m *MockCustomResourceAdapter) IsProjectClaimDeletion() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProjectClaimDeletion")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProjectClaimDeletion indicates an expected call of IsProjectClaimDeletion
func (mr *MockCustomResourceAdapterMockRecorder) IsProjectClaimDeletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProjectClaimDeletion", reflect.TypeOf((*MockCustomResourceAdapter)(nil).IsProjectClaimDeletion))
}

// ProjectReferenceExists mocks base method
func (m *MockCustomResourceAdapter) ProjectReferenceExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectReferenceExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectReferenceExists indicates an expected call of ProjectReferenceExists
func (mr *MockCustomResourceAdapterMockRecorder) ProjectReferenceExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectReferenceExists", reflect.TypeOf((*MockCustomResourceAdapter)(nil).ProjectReferenceExists))
}

// SetProjectClaimCondition mocks base method
func (m *MockCustomResourceAdapter) SetProjectClaimCondition(arg0 string, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProjectClaimCondition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProjectClaimCondition indicates an expected call of SetProjectClaimCondition
func (mr *MockCustomResourceAdapterMockRecorder) SetProjectClaimCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectClaimCondition", reflect.TypeOf((*MockCustomResourceAdapter)(nil).SetProjectClaimCondition), arg0, arg1)
}
