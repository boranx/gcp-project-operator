// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/util.go

// Package util is a generated GoMock package.
package util

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/gcp-project-operator/pkg/apis/gcp/v1alpha1"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockUtil is a mock of Util interface
type MockUtil struct {
	ctrl     *gomock.Controller
	recorder *MockUtilMockRecorder
}

// MockUtilMockRecorder is the mock recorder for MockUtil
type MockUtilMockRecorder struct {
	mock *MockUtil
}

// NewMockUtil creates a new mock instance
func NewMockUtil(ctrl *gomock.Controller) *MockUtil {
	mock := &MockUtil{ctrl: ctrl}
	mock.recorder = &MockUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtil) EXPECT() *MockUtilMockRecorder {
	return m.recorder
}

// SetCondition mocks base method
func (m *MockUtil) SetCondition(conditions *[]v1alpha1.Condition, status v1.ConditionStatus, reason, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCondition", conditions, status, reason, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCondition indicates an expected call of SetCondition
func (mr *MockUtilMockRecorder) SetCondition(conditions, status, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCondition", reflect.TypeOf((*MockUtil)(nil).SetCondition), conditions, status, reason, message)
}
